
Test Automation 
-------------------

1. Automation Testing 
-----------------------
Tester - Instructs the tool and tool will perform Testing operation 
Tool - Software application which will perform the Testers instructions.

Classification of Automation Tool
-----------------------------------

1. Functional  - Check the functionality of application 

     Tools for Functional Automation
------------------------------------------
1. QTP, UFT, RFT(Rational Functional Tester(VB script), SilkTest, Renorex, TestComplete, Test Sigma, Selenium, Winrunner(TSL), Katalon Studio 
 
2. Non Functional - Performance, Security, reliability, User-friendly 
   Performance Testing - LoadRunner, Neoload, OctoPerf, Jmeter, OpenSTA, SilkPerfomer, Rational Performance Tester.
3. Test Management Tool - QCALM, Rational Test Manager, QAMonitor, TestDirector, JIRA.


Functional Testing 
---------------------
What is the use Learn Selenium
---------------------------------
Selenium - Open Source Tool - It can automate only Browser (It can test only WebApplication)
No Language Dependency - Java, Python, Ruby, JavaScirpt, Kotlin, CSharp.
Directly Interacting with Browsers.
3. Andriod, IOS, Windows, Linux, Mac, Solaris
4. Google Chrome, Mozila Firefox, IE, Edge, Safari, OPera
5. Parallel Execution
6. Integration of ANT and Maven 
7. Generate Report with help of TestNG (Unit Testing Framework)
--------------------------------------------------------------
Selenium Limitation 
----------------------
By using the POM (Page Object Model Framework) we can overcome this issue (Object Repository)

Selenium Components
---------------------

Selenium IDE  - Record & PlayBack (useful Regression testing) - Browser Plugin
Selenium RC  (No Longer Now)
Selenium WebDriver
Selenium Gird  (Execute the test with Multiple Environment) 


Selenium WebDriver
--------------------
Selenium WebDriver Automates Browser, That's it!

What you do with that power is entirely up to you.

What is mean by WebDriver ?

It is an Interface , It contains only method declarations (get(String url), quit(), close(), getTitle(), getPageSource(), getCurrentUrl())

Selenium WebDriver Implementation in Java
--------------------------------------------

package webdriverImplementation;

public interface WebDriver 
{
	public void get(String url);	
	public void getTitle();
	public void getPageSource();
	public void close();
	public void quit();	 

}
-------------------------------------------
package webdriverImplementation;

public class ChromeDriver implements WebDriver
{

	public void get(String url) {
		System.out.println("The Application Chrome url is.."+url);		
	}

	public void getTitle() {		
		System.out.println("This is the Chrome Title of WebPage"); 		
	}

	public void getPageSource() {
		System.out.println("This is the Chrome PageSource of WebPage"); 	
		
	}

	public void close() {
		System.out.println("Chrome Browser Current Window Closed..");
		
	}

	 
	public void quit() {
		System.out.println("Chrome Browser Session Closed..");
		
	}

}
----------------------------------------------------
package webdriverImplementation;

public class EdgeDriver implements WebDriver
{

	public void get(String url) {
		System.out.println("The Application Edge url is.."+url);		
	}

	public void getTitle() {		
		System.out.println("This is the  Edge Title of WebPage"); 		
	}

	public void getPageSource() {
		System.out.println("This is the Edge PageSource of WebPage"); 	
		
	}

	public void close() {
		System.out.println("Edge Browser Current Window Closed..");
		
	}

	 
	public void quit() {
		System.out.println("Edge Browser Session Closed..");
		
	}

}
----------------------------------------------------------------
package webdriverImplementation;

public class TestWebDriver {

	public static void main(String[] args)
	{
		 WebDriver driver = new ChromeDriver();
		 driver.get("https://petstore.octoperf.com/");
		 driver.getTitle();
		 driver.getPageSource();
		 driver.close();
		 driver.quit();
		 
		 WebDriver driver1 = new EdgeDriver();
		 driver1.get("https://swagger.io/tools/swagger-ui/");
		 driver1.getTitle();
		 driver1.getPageSource();
		 driver1.close();
		 driver1.quit();

	}

}

Business Scenario for Test Automation
---------------------------------------
Landing Page
----------------

1. Navigate to "https://petstore.octoperf.com/" with ChromeBrowser and Verify the Current URL is matching with "https://petstore.octoperf.com/"
2. Verify the Title of WebPage "JpetStore Demo" //*[@id="Content"]/h2
3. Verify the Welcome message "Welcome to JPetStore 6"
4. Verify the Enter the Store link is present 
5. Verify the "Copyright www.mybatis.org" Text is present //*[@id="Content"]/p[2]/sub
6. Verify the Enter the store link is navigating to HomePage
 

Code Snippet
--------------

package test;

import org.openqa.selenium.By;
import org.openqa.selenium.WebDriver;
import org.openqa.selenium.WebElement;
import org.openqa.selenium.chrome.ChromeDriver;

public class FirstTestScript {

	public static void main(String[] args) throws InterruptedException
	{
		// Launch the Chrome Browser..and Navigate to given URL
		// Object Creating 
		WebDriver driver = new ChromeDriver();
		driver.get("https://petstore.octoperf.com/");

		//Validation methods
		String actualURL = driver.getCurrentUrl();
		System.out.println("The Current URl is.."+actualURL);
		String expectedURL = "https://petstore.octoperf.com/";

		// Assertions
		if(expectedURL.equals(actualURL))
			System.out.println("URL Matching TestCase Passed..");
		else
			System.out.println("URL Not Matching Testcase Failed..");

		String actualTitle = driver.getTitle();
		System.out.println("The WebPage Title is..."+actualTitle);
		String expectedTitle = "JPetStore Demo";

		// Assertions
		if(expectedTitle.equals(actualTitle))
			System.out.println("WebPage Title Matching TestCase Passed..");
		else
			System.out.println("URLWebPage Title Not Matching Testcase Failed..");

		WebElement element = driver.findElement(By.xpath("//*[@id='Content']/h2"));
        String actualWelcomeMsg = element.getText();
        System.out.println(actualWelcomeMsg);
        String exMsg = "Welcome to JPetStore 6";
        
        
        //Assertions
        if(exMsg.equals(actualWelcomeMsg))
        	System.out.println("Welcome Message Matching TestCase Passed..");
        else
        	System.out.println("Welcome Message Not Matching TestCase Passed..");
        
        String copyRightMsg = driver.findElement(By.xpath("//*[@id='Content']/p[2]/sub")).getText();
        System.out.println(copyRightMsg);
        String exCpyMsg = "Copyright www.mybatis.org";
      //Assertions
        if(exCpyMsg.equals(copyRightMsg))
        	System.out.println("CopyRight Message Matching TestCase Passed..");
        else
        	System.out.println("CopyRight Message Not Matching TestCase Failed..");
        
        
        driver.findElement(By.linkText("Enter the Store")).click();
        
        String signInText = driver.findElement(By.linkText("Sign In")).getText();
        System.out.println(signInText);
        String expectedValue = "Sign In";
        
      //Assertions
        if(expectedValue.equals(signInText))
        	System.out.println("Sucessfully Navigated to HomePage TestCase Passed..");
        else
        	System.out.println("HomePage Navigation TestCase Failed..");        
        

		//Will terminate the Entire browser Session 
		driver.quit();


	}

}


UnitTesting Framework Code - Using TestNG 
----------------------------

package test;

import org.openqa.selenium.WebDriver;
import org.openqa.selenium.chrome.ChromeDriver;
import org.testng.Assert;
import org.testng.Reporter;
import org.testng.annotations.AfterMethod;
import org.testng.annotations.BeforeMethod;
import org.testng.annotations.Test;

public class VerifyLandingPage // Test Name 
{
	
	WebDriver driver;
	
	@BeforeMethod
	public void setUp()
	{
		driver = new ChromeDriver();;
	}	
	
	@Test
	public void test_LandingPage() // Testcase name 
	{	
	 
		driver.get("https://petstore.octoperf.com/");		
		String actualURL = driver.getCurrentUrl();
		System.out.println("The Current URl is.."+actualURL);
		String expectedURL = "https://petstore.octoperf.com/";
		try
		{
			Assert.assertEquals(actualURL, expectedURL);
			System.out.println("URL Matching TestCase Passed..");
			Reporter.log("URL Matching TestCase Passed..");
		}
		catch(AssertionError e)
		{
			System.out.println("URL Not Matching Testcase Failed.."+e.getMessage());
			Reporter.log("URL Not Matching Testcase Failed..");
		}		
		
	}
	
	@AfterMethod
	public void tearDown()
	{
		driver.quit();
	}
	
	 

}

Identification of Business Scenario 
--------------------------------------
Automating a website https://petstore.octoperf.com/ with selenium and TestNG involves creating test scenarios that cover various functionality and user interactions on the website. Here are some of common scenarios you might consider automating.


Landing Page
----------------

1. Navigate to "https://petstore.octoperf.com/" with ChromeBrowser and Verify the Current URL is matching with "https://petstore.octoperf.com/"
2. Verify the Title of WebPage "JpetStore Demo" //*[@id="Content"]/h2
3. Verify the Welcome message "Welcome to JPetStore 6"
4. Verify the Enter the Store link is present 
5. Verify the "Copyright www.mybatis.org" Text is present //*[@id="Content"]/p[2]/sub
6. Verify the Enter the store link is navigating to HomePage

Product Home Page
-----------------------

1. Verify the Sign In functionality with valid Credentials.
2. Verify Search Functionality (Search for Product )shows relevant information 
Product Catalog
Verify the presence of products on the Home Page
Verify the details of Individual Products
Choose any of Product (like Fish, Cats...)
Choose Item id 
Adding Products to Cart
Choose Proceed to Checkout
Provide the relevant payment details 
Confirm the Billing address
Verify Order submission "Thank you, your order has been submitted."

Structure of Automation Framework
--------------------------------------
1. Object Repository (It contains All Object Details should be stored in common location)
2. Test Data Management (Test Data needs to be stored in Excel,any data source)
3. Reporting Feature must be implemented
4. Utility Libraries needs to created 
5. Testcase management Needs to be maintained properly 
6. Browser management Needs to be maintained properly (Suppose working with More then one browser)
7. Main source code Needs to be maintained properly

Stage1 Coding
----------------
package testcases;

import org.openqa.selenium.WebDriver;
import org.testng.annotations.Test;

import browserImplementation.BrowserConfig;

public class VerifyLandingPage
{
	BrowserConfig browserconfig;
	WebDriver driver=null;
	@Test
	public void test_LandingPage()
	{
		browserconfig = new BrowserConfig();
		driver = browserconfig.Launch_Chrome();
		driver.get("https://petstore.octoperf.com/"); // Opening the Application URL 
		driver.quit(); // Closing Browser Session 
		
	}

}
Browser Configuration 
-------------------------

package browserImplementation;

import org.openqa.selenium.WebDriver;
import org.openqa.selenium.chrome.ChromeDriver;
import org.openqa.selenium.edge.EdgeDriver;
import org.openqa.selenium.firefox.FirefoxDriver;

public class BrowserConfig 
{
	WebDriver driver;
	public WebDriver Launch_Chrome()
	{
		  driver = new ChromeDriver(); // Chrome Browser Implementation 
		  return driver;
	}
	public WebDriver Launch_Edge()
	{
		  driver = new EdgeDriver(); //Edge Browser Implementation
		  return driver;
	}
	public WebDriver Launch_Firefox()
	{
		  driver = new FirefoxDriver(); // Firefox Browser Implementation 
		  return driver;
	}

}

Stage2 Coding 
-----------------
Implement the Object Repository 

# This is Global Object Repository which contain all object information
#key and Value pair combination 
BaseURL=https://petstore.octoperf.com/
username=mohan
password=mohan

package objectRepository;

import java.io.FileNotFoundException;
import java.io.FileReader;
import java.io.IOException;
import java.util.Properties;

public class ObjectRepositoryReader
{
	Properties objpro;
	
	public ObjectRepositoryReader() throws IOException
	{
		String path ="D:\\Clients\\KH\\Walmart\\SeleniumTestAutomation\\com.automation.framework\\ObjectRepository\\object.properties";
	    FileReader reader = new FileReader(path);
	    
	    objpro = new Properties();
	    objpro.load(reader);
	    
	}
	
	public String get_BaseURL()
	{
		return objpro.getProperty("BaseURL");
	}
	
	

}


Refactored Testcase Code 
---------------------------

package testcases;

import java.io.IOException;

import org.openqa.selenium.WebDriver;
import org.testng.annotations.AfterTest;
import org.testng.annotations.BeforeTest;
import org.testng.annotations.Test;

import browserImplementation.BrowserConfig;
import objectRepository.ObjectRepositoryReader;

public class VerifyLandingPage {
	BrowserConfig browserconfig;
	WebDriver driver = null;
	ObjectRepositoryReader or;

	@BeforeTest
	public void setUp() throws IOException {
		browserconfig = new BrowserConfig();
		or = new ObjectRepositoryReader();
	}

	@Test
	public void test_LandingPage() throws IOException {

		driver = browserconfig.Launch_Chrome();
		or.get_BaseURL();
	}

	@AfterTest
	public void tearDown() {
		driver.quit(); // Closing Browser Session
	}

}


Todays Session Implementation
-------------------------------

package testcases;

import java.io.IOException;
import java.time.Duration;

import org.openqa.selenium.WebDriver;
import org.testng.annotations.AfterMethod;
import org.testng.annotations.BeforeMethod;
import org.testng.annotations.Test;

import browserImplementation.BrowserConfig;
import objectRepository.ObjectRepositoryReader;
import pages.LandingPage;

public class LandingPageTest 
{
	BrowserConfig broconf;
	WebDriver driver;
	ObjectRepositoryReader or;
	LandingPage lp;
	
	@BeforeMethod()
	public void setUp() throws IOException
	{
		 broconf = new BrowserConfig();
		 or = new ObjectRepositoryReader();
		
	}
	
	@Test
	public void test_LandingPage() throws IOException, InterruptedException
	{		
		 driver = broconf.Launch_Chrome();
		 driver.manage().timeouts().implicitlyWait(Duration.ofSeconds(2));
		 driver.get(or.get_BaseURL());
		 lp = new LandingPage(driver);
		 
		 lp.verify_CurrentURl(); // Verifying Current URL
		 
		 lp.verify_PageTitle(); // Verifying the Page Title
		 
		 lp.click_EntertheStore(); //Method Reference 
		
		 
		 
		 
		 //driver.findElement(By.linkText(or.Click_EnterStore())); // ObjectRepository Reference
		 
		 //driver.findElement(By.linkText("Enter the Store")).click(); // Raw Code		 
	}
	
	@AfterMethod
	public void tearDown()
	{
		driver.quit();
	}

}


Landing Page Class
--------------------

package pages;

import org.openqa.selenium.By;
import org.openqa.selenium.WebDriver;
import org.testng.Assert;
import org.testng.Reporter;

import objectRepository.ObjectRepositoryReader;

public class LandingPage 
{
	WebDriver driver;
	ObjectRepositoryReader or;
	By enterStore = By.linkText("Enter the Store");
	
	public LandingPage(WebDriver driver)
	{
		this.driver = driver;
	}
	
	public void verify_CurrentURl()
	{
		String actualURL = driver.getCurrentUrl();
		String expectedURL = "https://petstore.octoperf.com/";
		try
		{
			Assert.assertEquals(actualURL, expectedURL);
			System.out.println("URL Matching TestCase Passed..");
			Reporter.log("URL Matching TestCase Passed..");
		}
		catch(AssertionError e)
		{
			System.out.println("URL Not Matching Testcase Failed.."+e.getMessage());
			Reporter.log("URL Not Matching Testcase Failed..");
		}		
	}
	
	public void click_EntertheStore()
	{
		 driver.findElement(enterStore).click();
	}
	
	public void verify_PageTitle()
	{
		String actualTitle = driver.getTitle();
		String expectedTitle = "JPetStore Demo";
		try
		{
			Assert.assertEquals(actualTitle, expectedTitle);
			System.out.println("Title Matching TestCase Passed..");
			Reporter.log("Title Matching TestCase Passed..");
		}
		catch(AssertionError e)
		{
			System.out.println("Title Not Matching Testcase Failed.."+e.getMessage());
			Reporter.log("Title Not Matching Testcase Failed..");
		}		
		
	}

}

//*[@id="Content"]/h2

//*[@id="Content"]/p[2]/sub


Test Data Driven Framework Implementation using TestNG dataprovider
-------------------------------------------

package testcases;

import java.io.IOException;
import java.time.Duration;

import org.openqa.selenium.WebDriver;
import org.testng.annotations.BeforeMethod;
import org.testng.annotations.DataProvider;
import org.testng.annotations.Test;

import browserImplementation.BrowserConfig;
import objectRepository.ObjectRepositoryReader;
import pages.LandingPage;
import pages.LoginPage;

public class VerifyLogin 
{
	
	BrowserConfig broconf;
	WebDriver driver;
	ObjectRepositoryReader or;
	LandingPage lp;
	LoginPage lop;
	
	@BeforeMethod()
	public void setUp() throws IOException
	{
		 broconf = new BrowserConfig();
		 or = new ObjectRepositoryReader();
		 
	}
	
	@Test(dataProvider = "dp")
	public void test_LoginToSite(String username, String password)
	{
		 driver = broconf.Launch_Chrome();
		 driver.manage().timeouts().implicitlyWait(Duration.ofSeconds(2));
		 driver.get(or.get_BaseURL());
		 lp = new LandingPage(driver);
		 lp.click_EntertheStore();
		 lop = new LoginPage(driver);
		 lop.LoginToSite(username,password); // Calling the LoginPage Method
		 driver.quit();
	}
	
	@DataProvider
	  public Object[][] dp() {
	    return new Object[][] {
	      new Object[] { "mohan", "mohan" },
	      new Object[] {"mohan1", "mohan1"  },
	      new Object[] {"mohan2", "mohan2"  },
	      new Object[] {"mohan3", "mohan3"  },
	    };
	  }

}
-------------------------------------------------------------------------

Data Driven Testing using Excel Implementation

package excelImplementation;

import java.io.FileInputStream;
import java.io.FileNotFoundException;
import java.io.IOException;

import org.apache.poi.xssf.usermodel.XSSFSheet;
import org.apache.poi.xssf.usermodel.XSSFWorkbook;

public class ExcelReader
{
	XSSFWorkbook workbook;
	XSSFSheet sheet;
	FileInputStream fis;
	
	public ExcelReader(String filepath) throws IOException  
	{
		try {
			fis = new FileInputStream(filepath);
			workbook = new XSSFWorkbook(fis);
		}
		catch(FileNotFoundException e)
		{
			e.printStackTrace();
		}		
	}
	public String getData(int sheetnumber,int row, int col)
	{
		sheet = workbook.getSheetAt(sheetnumber);
		String data = sheet.getRow(row).getCell(col).getStringCellValue();
		return data;
	}
	public int getRowCount(int sheetIndex)
	{
		int rowCount = workbook.getSheetAt(sheetIndex).getLastRowNum();
		rowCount = rowCount + 1;
		return rowCount;
	}

}

-----------------------------------------------
Excel Page Code Implementation 
--------------------------------

package pages;

import java.io.IOException;

import org.openqa.selenium.By;
import org.openqa.selenium.WebDriver;
import org.testng.annotations.Test;

import excelImplementation.ExcelReader;

public class LoginPageExcelImplementation
{
	WebDriver driver;
	ExcelReader er;
	public LoginPageExcelImplementation(WebDriver driver)
	{
		this.driver = driver;
		
	}
	

	public void LoginToSite() throws IOException
	{
		String path = "D:\\Clients\\KH\\Walmart\\SeleniumTestAutomation\\com.automation.framework\\DataSet\\TestDataSet.xlsx";
		er = new ExcelReader(path);
		int rowcount = er.getRowCount(0);
		for(int i=0;i<rowcount;i++)
		{
		driver.findElement(By.linkText("Sign In")).click();
		driver.findElement(By.name("username")).sendKeys(er.getData(0, i, 0));
		System.out.println(er.getData(0, i, 0));
		driver.findElement(By.name("password")).clear();
		driver.findElement(By.name("password")).sendKeys(er.getData(0, i, 1));
		System.out.println(er.getData(0, i, 1));
		driver.findElement(By.name("signon")).click();
		driver.findElement(By.linkText("Sign Out")).click();
		}
		
	}

}

------------------------------------------------------------
Excel SHeet Testcase Implementation 
--------------------------------------

package testcases;

import java.io.IOException;
import java.time.Duration;

import org.openqa.selenium.WebDriver;
import org.testng.annotations.AfterMethod;
import org.testng.annotations.BeforeMethod;
import org.testng.annotations.DataProvider;
import org.testng.annotations.Test;

import browserImplementation.BrowserConfig;
import objectRepository.ObjectRepositoryReader;
import pages.LandingPage;
import pages.LoginPage;
import pages.LoginPageExcelImplementation;

public class VerifyLoginExcel 
{
	
	BrowserConfig broconf;
	WebDriver driver;
	ObjectRepositoryReader or;
	LandingPage lp;
	LoginPageExcelImplementation lep;
	
	@BeforeMethod()
	public void setUp() throws IOException
	{
		 broconf = new BrowserConfig();
		 or = new ObjectRepositoryReader();
		 
	}
	
	@Test 
	public void test_LoginToSite() throws IOException
	{
		 driver = broconf.Launch_Chrome();
		 driver.manage().timeouts().implicitlyWait(Duration.ofSeconds(2));
		 driver.get(or.get_BaseURL());
		 lp = new LandingPage(driver);
		 lp.click_EntertheStore();
		 lep = new LoginPageExcelImplementation(driver);
		 lep.LoginToSite();// Calling the LoginPage Method
		  
	}
	
	@AfterMethod
	public void tearDown()
	{
		driver.quit();
	}
	
	
	 

}






















